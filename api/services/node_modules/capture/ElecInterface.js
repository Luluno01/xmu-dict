/**
 * ElecInterface
 *
 * @description :: ElecInterface
 * @author      :: 石建森
 */

// Import dependencies
const Convention = require('./Convention.js');
const STATUS = Convention.STATUS;
const DATA_TYPE = Convention.DATA_TYPE;
const config = require('./Config.js');
const CrawlAutomata = require('CrawlAutomata.js');
const elecParser = require('ElecParser.js');
const cheerio = require('cheerio');

/**
 * Some custom functions, codes, or some modules
 * NOTE: This is a node module, variables below are 'static'
 */

/**
 * Capture info
 * getSessionID: ['http://elec.xmu.edu.cn/PdmlWebSetup/Pages/SMSMain.aspx', 'get'],
 * click: ['http://elec.xmu.edu.cn/PdmlWebSetup/Pages/SMSMain.aspx', 'post'],
 * inquiry: ['http://elec.xmu.edu.cn/PdmlWebSetup/Pages/SMSMain.aspx', 'post']
 */

/**
 * @param {Object} option may contain username and password
 * @param {function} callback callback function. Prototype: function({result})
 */
module.exports = (option, callback) => {
  // Do something here
  // Capture and process data
  var automata = new CrawlAutomata();
  function onError(status) {
    callback({
      status: status || STATUS.SERVER_FAILURE // STATUS.OK == 0
    });
    // console.log('Error! ' + status);
  }
  function onSuccess(data) {
    callback({
      status: STATUS.OK,
      dataType: DATA_TYPE.JSON,
      data: data
    });
  }

  var _room = null; // An instance of room

  // Init automata
  automata.states = {
    getSessionID: {
      url: 'http://elec.xmu.edu.cn/PdmlWebSetup/Pages/SMSMain.aspx',
      method: 'get',
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('[ Elec ] Get session id timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('[ Elec ] Get session id failed. ' + err);
          }
          onError(status);
        } else {
          var $ = cheerio.load(res.text);
          automata.states.click.data.__VIEWSTATE = $('#__VIEWSTATE').val();
          automata.states.click.data.__EVENTVALIDATION = $('#__EVENTVALIDATION').val();
          automata.states.click.data.dxgvSubInfo$CallbackState = $('#dxgvSubInfo_CallbackState').val();
          automata.states.click.data.dxgvElec$CallbackState = $('#dxgvElec_CallbackState').val();
          // console.log(VIEWSTATE, EVENTVALIDATION);
          sails.log.info('[ Elec ] Session ID get');
          sails.log.silly(res.text);
          automata.transit('click');
        }
      })
    },
    click: {
      url: 'http://elec.xmu.edu.cn/PdmlWebSetup/Pages/SMSMain.aspx',
      method: 'post',
      type: 'form',
      data: {
        '__VIEWSTATE': 'rua',
        '__EVENTVALIDATION': 'rua',
        'dxgvSubInfo$CallbackState': 'rua',
        'dxgvElec$CallbackState': 'rua',
        'drxiaoqu': option.drxiaoqu,
        'drlou': '',
        'txtRoomid': '',
        'dxdateStart_Raw': option.dxdateStart_Raw,
        'dxdateEnd_Raw': option.dxdateEnd_Raw,
      },
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('[ Elec ] Get clicky stuff timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('[ Elec ] Get clicky stuff failed. ' + err);
          }
          onError(status);
        } else {
          var $ = cheerio.load(res.text);
          automata.states.inquiry.data.__VIEWSTATE = $('#__VIEWSTATE').val();
          automata.states.inquiry.data.__EVENTVALIDATION = $('#__EVENTVALIDATION').val();
          automata.states.inquiry.data.dxgvSubInfo$CallbackState = $('#dxgvSubInfo_CallbackState').val();
          automata.states.inquiry.data.dxgvElec$CallbackState = $('#dxgvElec_CallbackState').val();
          // console.log(VIEWSTATE, EVENTVALIDATION);
          sails.log.info('[ Elec ] Get clicky stuff success');
          sails.log.silly(res.text);
          automata.transit('inquiry');
        }
      })
    },
    inquiry: {
      url: 'http://elec.xmu.edu.cn/PdmlWebSetup/Pages/SMSMain.aspx',
      method: 'post',
      type: 'form',
      data: {
        '__VIEWSTATE': 'rua',
        '__EVENTVALIDATION': 'rua',
        'dxgvSubInfo$CallbackState': 'rua',
        'dxgvElec$CallbackState': 'rua',
        'drxiaoqu': option.drxiaoqu,
        'drlou': option.drlou,
        'txtRoomid': option.txtRoomid,
        'dxdateStart_Raw': option.dxdateStart_Raw,
        'dxdateEnd_Raw': option.dxdateEnd_Raw,
      },
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('[ Elec ] Inquiry timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('[ Elec ] Inquiry failed. ' + err);
          }
          onError(status);
          // console.log(err);
        } else /*if(res.text.match('Success'))*/ {
          sails.log.info('[ Elec ] Inquiry success. Domitory:', option.drxiaoqu, option.drlou, option.txtRoomid);
          sails.log.silly(res.text);
          var result = elecParser(res.text);
          onSuccess(result);
          if((result.consumptions && result.consumptions.length) || (result.payment && result.payment.length)) { // If the result is not null
            if(!_room) { // If it is a new room
              Room.create({
                campusID: option.drxiaoqu,
                dormID: option.drlou,
                roomID: option.txtRoomid,
                electricityBill: result
              }).exec((err, room) => {
                if(err) {
                  // Ignore error
                  sails.log.error('[ Elec ] An error has occurred creating a new room');
                  return;
                }
                // New room created
                _room = room;
                sails.log.info('[ Elec ] New room created');
              });
            } else { // It is an existing room in the database, but cached expired
              _room.electricityBill = result;
              _room.save();
            }
          }
        }
      })
    },
  };

  // Use cache first
  Room.findOne({
    campusID: option.drxiaoqu,
    dormID: option.drlou,
    roomID: option.txtRoomid
  }).exec((err, room) => {
    if(err) {
      // Ignore error and start capturing
      sails.log.error('[ Elec ] An error has occurred finding a room');
      automata.start('getSessionID');
      return;
    }
    if(!room) { // New room
      sails.log.info('[ Elec ] New room:', option.drxiaoqu, option.drlou, option.txtRoomid);
      automata.start('getSessionID');
    } else { // Room found
      _room = room;
      if(new Date() - room.updatedAt > config.elec.cacheTTL * 1000 || !(room.electricityBill)) { // Cache expired or empty data
        sails.log.info('[ Elec ] Cache expired or invalid.');
        automata.start('getSessionID');
      } else {
        sails.log.info('[ Elec ] Return data from cache.');
        onSuccess(room.electricityBill);
      }
    }
  });
  
};
