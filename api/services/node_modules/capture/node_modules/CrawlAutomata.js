/**
 * CrawlAutomata
 *
 * @description :: CrawlAutomata
 * @author      :: Untitled
 */

const superagent = require('superagent');
require('superagent-charset')(superagent);
// const Convention = require('./Convention.js');
// const STATUS = Convention.STATUS;
// const DATA_TYPE = Convention.DATA_TYPE;

class CrawlAutomata {
  /**
   * @description constructor
   * 
   * @param {Object} states an object of all states of this automata, can be set after `new`
   * @param {string} charset the encoding of the target page
   * @example
   * var states = {
   *   getSessionID: {
   *     url: 'http://ssfw.xmu.edu.cn/cmstar/index.portal',
   *     method: 'get',
   *     type: 'form',
   *     data: {username: '', password: ''},
   *     callback: ((err, res) => {
   *       someInstanceofCrawlAutomata.transit('someState');
   *     })
   *   },
   *   ...
   * }
   */
  constructor(states, charset) {
    this.agent = superagent.agent();
    this.states = states || {}; // Or `option`
    this.currentState = '';
    this.req;
    this.charset = charset || 'utf-8';
  }

  /**
   * @description A method to trigger the automata
   * 
   * @param {string} beginStateName the initial state name
   */
  start(beginStateName) {
    // sails.log.debug('states: ' + JSON.stringify(this.states, ' ', 2));
    if(global.sails) sails.log.debug('CrawlAutomata start');
    this.transit(beginStateName || (Object.keys(this.states))[0]);
  }

  /**
   * 
   * @param {string} targetStateName target state name to transit to
   */
  transit(targetStateName) {
    if(global.sails) sails.log.debug('Transit to: ' + targetStateName);
    this.currentState = targetStateName;
    this.ajax(this.states[targetStateName]);
  }

  /**
   * 
   * @param {object} option an object that contains the requred options.
   */
  ajax(option) {
    if(global.sails) sails.log.debug('option.url: ' + option.url);
    option = {
      url: option.url,
      method: option.method.toLowerCase() || 'get',
      type: option.type,
      data: option.data,
      redirects: option.redirects || 5,
      callback: option.callback || (() => {})
    };
    this.req = this.agent[option.method](option.url).charset(this.charset).redirects(option.redirects);
    if(option.type == 'form') {
      this.req = this.req.type('form');
    }
    if(option.data) {
      this.req = this.req.send(option.data); // json or string
      if(global.sails) sails.log.verbose(this.req._formData);
    }
    this.req = this.req.timeout({
      deadline: 7000,
      response: 5000
    }).end(option.callback);
  }
}

module.exports = CrawlAutomata;
