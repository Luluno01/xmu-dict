/**
 * GradeInterface
 *
 * @description :: GradeInterface
 */

const Convention = require('./Convention.js');
const STATUS = Convention.STATUS;
const DATA_TYPE = Convention.DATA_TYPE;
const CrawlAutomata = require('../CrawlAutomata.js');

/**
 * Some custom functions, codes, or some modules
 * NOTE: This is a node module, variables below are 'static'
 */

/**
 * Capture info
 * getSessionID: ['http://ssfw.xmu.edu.cn/cmstar/index.portal', 'get'],
 * login: ['http://ssfw.xmu.edu.cn/cmstar/userPasswordValidate.portal', 'post'],
 * main: ['http://ssfw.xmu.edu.cn/cmstar/index.portal?.pn=p1201_p3535', 'get']
 */

/**
 * @param {Object} option may contain username and password
 * @param {function} callback callback function. Prototype: function({result})
 */
module.exports = (option, callback) => {
  // Do something here
  // Capture and process data
  var automata = new CrawlAutomata();
  function onError(status) {
    callback({
      status: status || STATUS.SERVER_FAILURE // STATUS.OK == 0
    });
  }
  function onSuccess(data) {
    callback({
      status: STATUS.OK,
      dataType: DATA_TYPE.TEXT,
      data: data
    });
  }
  automata.states = {
    getSessionID: {
      url: 'http://ssfw.xmu.edu.cn/cmstar/index.portal',
      method: 'get',
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('Get session id timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('Get session id failed. ' + err);
          }
          onError(status);
        } else {
          sails.log.info('Session ID get');
          sails.log.verbose(res.text);
          automata.transit('login');
        }
      })
    },
    login: {
      url: 'http://ssfw.xmu.edu.cn/cmstar/userPasswordValidate.portal',
      method: 'post',
      type: 'form',
      data: {
        'Login.Token1': option.username,
        'Login.Token2': option.password,
        'goto': 'http://ssfw.xmu.edu.cn/cmstar/loginSuccess.portal',
        'gotoOnFail': 'http://ssfw.xmu.edu.cn/cmstar/loginFailure.portal'
      },
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('Login timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('Login failed. ' + err);
          }
          onError(status);
        } else {
          sails.log.info('Logged in. User: ' + option.username);
          sails.log.verbose(res.text);
          automata.transit('main');
        }
      })
    },
    main: {
      url: 'http://ssfw.xmu.edu.cn/cmstar/index.portal?.pn=p1201_p3535',
      method: 'get',
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('Get grade page timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('Get grade page failed. ' + err);
          }
          onError(status);
        } else {
          sails.log.verbose(res.text);
          onSuccess(res.text);
        }
      })
    }
  };
  automata.start('getSessionID');
  // var agent = superagent.agent();
  // var i = 0;
  // var keys = Object.keys(captureInfo.url);
  // var sender = [
  //   (url, callback) => {
  //     agent[url[1]](url[0])
  //       .end(callback);
  //   },
  //   (url, callback) => {
  //     agent[url[1]](url[0])
  //       .type('form')
  //       .send({'Login.Token1': option.username})
  //       .send({'Login.Token2': option.password})
  //       .send({'goto': 'http://ssfw.xmu.edu.cn/cmstar/loginSuccess.portal'})
  //       .send({'gotoOnFail': 'http://ssfw.xmu.edu.cn/cmstar/loginFailure.portal'})
  //       .end(callback);
  //   },
  //   (url, callback) => {
  //     agent[url[1]](url[0])
  //       .end(callback);
  //   }
  // ];
  // function next(handler) {
  //   var url = captureInfo.url[keys[i]];
  //   sender[i](url, handler[i++]);
  // }
  // var handler = [
  //   (err, res) => {
  //     if (err || !res.ok) {
  //       callback({
  //         status: STATUS.SERVER_FAILURE
  //       })
  //     } else {
  //       next(handler);
  //     }
  //   },
  //   (err, res) => {
  //     if (err || !res.ok) {
  //       callback({
  //         status: STATUS.SERVER_FAILURE
  //       })
  //     } else {
  //       // if login success
  //       next(handler);
  //     }
  //   },
  //   (err, res) => {
  //     // require(some module) and do something here
  //     if (err || !res.ok) {
  //       callback({
  //         status: STATUS.SERVER_FAILURE
  //       })
  //     } else {
  //       callback({
  //         status: STATUS.OK,
  //         dataType: DATA_TYPE.TEXT,
  //         data: res.text
  //       });
  //     }
  //   }
  // ];
  // next(handler);
};
