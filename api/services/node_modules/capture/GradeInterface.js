/**
 * GradeInterface
 *
 * @description :: GradeInterface
 * @author      :: Untitled
 */

// Import dependencies
const Convention = require('./Convention.js');
const STATUS = Convention.STATUS;
const DATA_TYPE = Convention.DATA_TYPE;
const CrawlAutomata = require('../CrawlAutomata.js');
const gradeParser = require('GradeParser.js');

/**
 * Some custom functions, codes, or some modules
 * NOTE: This is a node module, variables below are 'static'
 */

/**
 * Capture info
 * getSessionID: ['http://ssfw.xmu.edu.cn/cmstar/index.portal', 'get'],
 * login: ['http://ssfw.xmu.edu.cn/cmstar/userPasswordValidate.portal', 'post'],
 * main: ['http://ssfw.xmu.edu.cn/cmstar/index.portal?.pn=p1201_p3535', 'get']
 */

/**
 * @param {Object} option may contain username and password
 * @param {function} callback callback function. Prototype: function({result})
 */
module.exports = (option, callback) => {
  // Do something here
  // Capture and process data
  var automata = new CrawlAutomata();
  function onError(status) {
    callback({
      status: status || STATUS.SERVER_FAILURE // STATUS.OK == 0
    });
  }
  function onSuccess(data) {
    callback({
      status: STATUS.OK,
      dataType: DATA_TYPE.JSON,
      data: data
    });
  }
  automata.states = {
    getSessionID: {
      url: 'http://ssfw.xmu.edu.cn/cmstar/index.portal',
      method: 'get',
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('Get session id timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('Get session id failed. ' + err);
          }
          onError(status);
        } else {
          sails.log.info('Session ID get');
          sails.log.silly(res.text);
          automata.transit('login');
        }
      })
    },
    login: {
      url: 'http://ssfw.xmu.edu.cn/cmstar/userPasswordValidate.portal',
      method: 'post',
      type: 'form',
      data: {
        'Login.Token1': option.username,
        'Login.Token2': option.password,
        'goto': 'http://ssfw.xmu.edu.cn/cmstar/loginSuccess.portal',
        'gotoOnFail': 'http://ssfw.xmu.edu.cn/cmstar/loginFailure.portal'
      },
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('Login timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('Login failed. ' + err);
          }
          onError(status);
        } else {
          if(res.text.match('Fail')) { // Login failed
            sails.log.info('Login failed. User: ' + option.username);
            onError(STATUS.USERNAME_OR_PASSWORD_ERROR);
          } else if(res.text.match('Success')) {
            sails.log.info('Logged in. User: ' + option.username);
            automata.transit('main');
          } else {
            sails.log.info('Unknown login state. User: ' + option.username);
            onError(STATUS.UNKNOWN_RESPONSE);
          }
          sails.log.verbose(res.text);
        }
      })
    },
    main: {
      url: 'http://ssfw.xmu.edu.cn/cmstar/index.portal?.pn=p1201_p3535',
      method: 'get',
      callback: ((err, res) => {
        if(err || !res.ok) {
          var status = STATUS.SERVER_FAILURE;
          if(err.timeout) {
            sails.log.info('Get grade page timeout. ' + err);
            status = STATUS.TIMEOUT;
          } else {
            sails.log.info('Get grade page failed. ' + err);
          }
          onError(status);
        } else {
          sails.log.silly(res.text);
          onSuccess(gradeParser(res.text));
        }
      })
    }
  };
  automata.start('getSessionID');
};
